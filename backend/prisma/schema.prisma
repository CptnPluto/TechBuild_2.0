// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  client      String?  @db.VarChar(255)
  location    String?  @db.VarChar(255)
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  files       ProjectFile[]
  logs        ActivityLog[]

  @@map("projects")
}

model ProjectFile {
  id               String            @id @default(cuid())
  filename         String            @db.VarChar(255)
  fileSize         Int
  mimeType         String            @db.VarChar(100)
  filePath         String            @db.VarChar(500)
  description      String?           @db.Text
  processingStatus ProcessingStatus  @default(PENDING)
  processedData    Json?
  confidence       Float?
  metadata         Json?
  uploadedAt       DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Foreign keys
  projectId        String
  
  // Relations
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  processingJobs   AIProcessingJob[]
  logs             ActivityLog[]

  @@map("project_files")
}

model AIProcessingJob {
  id          String       @id @default(cuid())
  provider    String       @db.VarChar(100)
  jobType     String       @db.VarChar(100)
  status      JobStatus    @default(PENDING)
  progress    Int?         @default(0)
  result      Json?
  error       String?      @db.Text
  confidence  Float?
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  updatedAt   DateTime     @updatedAt

  // Foreign keys
  fileId      String

  // Relations
  file        ProjectFile  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  logs        ActivityLog[]

  @@map("ai_processing_jobs")
}

model ActivityLog {
  id        String    @id @default(cuid())
  level     LogLevel  @default(INFO)
  message   String    @db.Text
  metadata  Json?
  timestamp DateTime  @default(now())

  // Foreign keys (optional)
  fileId    String?
  projectId String?
  jobId     String?

  // Relations
  file      ProjectFile?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  project   Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  job       AIProcessingJob? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}